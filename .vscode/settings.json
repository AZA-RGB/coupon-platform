{
  // The name of the Zed theme to use for the UI.
  //
  // `mode` is one of:
  // - "system": Use the theme that corresponds to the system's appearance
  // - "light": Use the theme indicated by the "light" field
  // - "dark": Use the theme indicated by the "dark" field
  "theme": {
    "mode": "system",
    "light": "One Light",
    "dark": "One Dark"
  },
  "icon_theme": "Zed (Default)",
  // The name of a base set of key bindings to use.
  // This setting can take six values, each named after another
  // text editor:
  //
  // 1. "VSCode"
  // 2. "Atom"
  // 3. "JetBrains"
  // 4. "None"
  // 5. "SublimeText"
  // 6. "TextMate"
  "base_keymap": "VSCode",
  // Features that can be globally enabled or disabled
  "features": {
    // Which edit prediction provider to use.
    "edit_prediction_provider": "zed"
  },
  // The name of a font to use for rendering text in the editor
  "buffer_font_family": "Zed Plex Mono",
  // Set the buffer text's font fallbacks, this will be merged with
  // the platform's default fallbacks.
  "buffer_font_fallbacks": null,
  // The OpenType features to enable for text in the editor.
  "buffer_font_features": {
    // Disable ligatures:
    // "calt": false
  },
  // The default font size for text in the editor
  "buffer_font_size": 15,
  // The weight of the editor font in standard CSS units from 100 to 900.
  "buffer_font_weight": 400,
  // Set the buffer's line height.
  // May take 3 values:
  //  1. Use a line height that's comfortable for reading (1.618)
  //         "buffer_line_height": "comfortable"
  //  2. Use a standard line height, (1.3)
  //         "buffer_line_height": "standard",
  //  3. Use a custom line height
  //         "buffer_line_height": {
  //           "custom": 2
  //         },
  "buffer_line_height": "comfortable",
  // The name of a font to use for rendering text in the UI
  // You can set this to ".SystemUIFont" to use the system font
  "ui_font_family": "Zed Plex Sans",
  // Set the UI's font fallbacks, this will be merged with the platform's
  // default font fallbacks.
  "ui_font_fallbacks": null,
  // The OpenType features to enable for text in the UI
  "ui_font_features": {
    // Disable ligatures:
    "calt": false
  },
  // The weight of the UI font in standard CSS units from 100 to 900.
  "ui_font_weight": 400,
  // The default font size for text in the UI
  "ui_font_size": 18,
  // The default font size for text in the agent panel
  "agent_font_size": 16,
  // How much to fade out unused code.
  "unnecessary_code_fade": 0.3,
  // Active pane styling settings.
  "active_pane_modifiers": {
    // The factor to grow the active pane by. Defaults to 1.0
    // which gives the same size as all other panes.
    "magnification": 1.0,
    // Inset border size of the active pane, in pixels.
    "border_size": 0.0,
    // Opacity of the inactive panes. 0 means transparent, 1 means opaque.
    // Values are clamped to the [0.0, 1.0] range.
    "inactive_opacity": 1.0
  },
  // Layout mode of the bottom dock. Defaults to "contained"
  "bottom_dock_layout": "contained",
  // The direction that you want to split panes horizontally. Defaults to "up"
  "pane_split_direction_horizontal": "up",
  // The direction that you want to split panes horizontally. Defaults to "left"
  "pane_split_direction_vertical": "left",
  // Centered layout related settings.
  "centered_layout": {
    // The relative width of the left padding of the central pane from the
    // workspace when the centered layout is used.
    "left_padding": 0.2,
    // The relative width of the right padding of the central pane from the
    // workspace when the centered layout is used.
    "right_padding": 0.2
  },
  // All settings related to the image viewer.
  "image_viewer": {
    // The unit for image file sizes.
    // By default we're setting it to binary.
    // The second option is decimal.
    "unit": "binary"
  },
  // The key to use for adding multiple cursors
  // Currently "alt" or "cmd_or_ctrl"  (also aliased as
  // "cmd" and "ctrl") are supported.
  "multi_cursor_modifier": "alt",
  // Whether to enable vim modes and key bindings.
  "vim_mode": false,
  // Whether to show the informational hover box when moving the mouse
  // over symbols in the editor.
  "hover_popover_enabled": true,
  // Time to wait in milliseconds before showing the informational hover box.
  "hover_popover_delay": 300,
  // Whether to confirm before quitting Zed.
  "confirm_quit": false,
  // Whether to restore last closed project when fresh Zed instance is opened.
  "restore_on_startup": "last_session",
  // Whether to attempt to restore previous file's state when opening it again.
  // The state is stored per pane.
  // When disabled, defaults are applied instead of the state restoration.
  //
  // E.g. for editors, selections, folds and scroll positions are restored, if the same file is closed and, later, opened again in the same pane.
  // When disabled, a single selection in the very beginning of the file, zero scroll position and no folds state is used as a default.
  //
  // Default: true
  "restore_on_file_reopen": true,
  // Size of the drop target in the editor.
  "drop_target_size": 0.2,
  // Whether the window should be closed when using 'close active item' on a window with no tabs.
  // May take 3 values:
  //  1. Use the current platform's convention
  //         "when_closing_with_no_tabs": "platform_default"
  //  2. Always close the window:
  //         "when_closing_with_no_tabs": "close_window",
  //  3. Never close the window
  //         "when_closing_with_no_tabs": "keep_window_open",
  "when_closing_with_no_tabs": "platform_default",
  // What to do when the last window is closed.
  // May take 2 values:
  //  1. Use the current platform's convention
  //         "on_last_window_closed": "platform_default"
  //  2. Always quit the application
  //         "on_last_window_closed": "quit_app",
  "on_last_window_closed": "platform_default",
  // Whether to use the system provided dialogs for Open and Save As.
  // When set to false, Zed will use the built-in keyboard-first pickers.
  "use_system_path_prompts": true,
  // Whether to use the system provided dialogs for prompts, such as confirmation
  // prompts.
  // When set to false, Zed will use its built-in prompts. Note that on Linux,
  // this option is ignored and Zed will always use the built-in prompts.
  "use_system_prompts": true,
  // Whether the cursor blinks in the editor.
  "cursor_blink": true,
  // Cursor shape for the default editor.
  //  1. A vertical bar
  //     "bar"
  //  2. A block that surrounds the following character
  //     "block"
  //  3. An underline / underscore that runs along the following character
  //     "underline"
  //  4. A box drawn around the following character
  //     "hollow"
  //
  // Default: not set, defaults to "bar"
  "cursor_shape": null,
  // Determines when the mouse cursor should be hidden in an editor or input box.
  //
  // 1. Never hide the mouse cursor:
  //    "never"
  // 2. Hide only when typing:
  //    "on_typing"
  // 3. Hide on both typing and cursor movement:
  //    "on_typing_and_movement"
  "hide_mouse": "on_typing_and_movement",
  // Determines how snippets are sorted relative to other completion items.
  //
  // 1. Place snippets at the top of the completion list:
  //    "top"
  // 2. Place snippets normally without any preference:
  //    "inline"
  // 3. Place snippets at the bottom of the completion list:
  //    "bottom"
  "snippet_sort_order": "inline",
  // How to highlight the current line in the editor.
  //
  // 1. Don't highlight the current line:
  //    "none"
  // 2. Highlight the gutter area:
  //    "gutter"
  // 3. Highlight the editor area:
  //    "line"
  // 4. Highlight the full line (default):
  //    "all"
  "current_line_highlight": "all",
  // Whether to highlight all occurrences of the selected text in an editor.
  "selection_highlight": true,
  // The debounce delay before querying highlights from the language
  // server based on the current cursor location.
  "lsp_highlight_debounce": 75,
  // Whether to pop the completions menu while typing in an editor without
  // explicitly requesting it.
  "show_completions_on_input": true,
  // Whether to display inline and alongside documentation for items in the
  // completions menu
  "show_completion_documentation": true,
  // Show method signatures in the editor, when inside parentheses.
  "auto_signature_help": false,
  // Whether to show the signature help after completion or a bracket pair inserted.
  // If `auto_signature_help` is enabled, this setting will be treated as enabled also.
  "show_signature_help_after_edits": false,
  // Whether to show code action button at start of buffer line.
  "inline_code_actions": true,
  // What to do when go to definition yields no results.
  //
  // 1. Do nothing: `none`
  // 2. Find references for the same symbol: `find_all_references` (default)
  "go_to_definition_fallback": "find_all_references",
  // Which level to use to filter out diagnostics displayed in the editor.
  //
  // Affects the editor rendering only, and does not interrupt
  // the functionality of diagnostics fetching and project diagnostics editor.
  // Which files containing diagnostic errors/warnings to mark in the tabs.
  // Diagnostics are only shown when file icons are also active.
  // This setting only works when can take the following three values:
  //
  // Which diagnostic indicators to show in the scrollbar, their level should be more or equal to the specified severity level.
  // Possible values:
  //  - "off" — no diagnostics are allowed
  //  - "error"
  //  - "warning"
  //  - "info"
  //  - "hint"
  //  - null — allow all diagnostics (default)
  "diagnostics_max_severity": null,
  // Whether to show wrap guides (vertical rulers) in the editor.
  // Setting this to true will show a guide at the 'preferred_line_length' value
  // if 'soft_wrap' is set to 'preferred_line_length', and will show any
  // additional guides as specified by the 'wrap_guides' setting.
  "show_wrap_guides": true,
  // Character counts at which to show wrap guides in the editor.
  "wrap_guides": [],
  // Hide the values of in variables from visual display in private files
  "redact_private_values": false,
  // The default number of lines to expand excerpts in the multibuffer by.
  "expand_excerpt_lines": 5,
  // Globs to match against file paths to determine if a file is private.
  "private_files": ["**/.env*", "**/*.pem", "**/*.key", "**/*.cert", "**/*.crt", "**/secrets.yml"],
  // Whether to use additional LSP queries to format (and amend) the code after
  // every "trigger" symbol input, defined by LSP server capabilities.
  "use_on_type_format": true,
  // Whether to automatically add matching closing characters when typing
  // opening parenthesis, bracket, brace, single or double quote characters.
  // For example, when you type (, Zed will add a closing ) at the correct position.
  "use_autoclose": true,
  // Whether to automatically surround selected text when typing opening parenthesis,
  // bracket, brace, single or double quote characters.
  // For example, when you select text and type (, Zed will surround the text with ().
  "use_auto_surround": true,
  // Whether indentation of pasted content should be adjusted based on the context.
  "auto_indent_on_paste": true,
  // Controls how the editor handles the autoclosed characters.
  // When set to `false`(default), skipping over and auto-removing of the closing characters
  // happen only for auto-inserted characters.
  // Otherwise(when `true`), the closing characters are always skipped over and auto-removed
  // no matter how they were inserted.
  "always_treat_brackets_as_autoclosed": false,
  // Controls where the `editor::Rewrap` action is allowed in the current language scope.
  //
  // This setting can take three values:
  //
  // 1. Only allow rewrapping in comments:
  //    "in_comments"
  // 2. Only allow rewrapping in the current selection(s):
  //    "in_selections"
  // 3. Allow rewrapping anywhere:
  //    "anywhere"
  //
  // When using values other than `in_comments`, it is possible for the rewrapping to produce code
  // that is syntactically invalid. Keep this in mind when selecting which behavior you would like
  // to use.
  //
  // Note: This setting has no effect in Vim mode, as rewrap is already allowed everywhere.
  "allow_rewrap": "in_comments",
  // Controls whether edit predictions are shown immediately (true)
  // or manually by triggering `editor::ShowEditPrediction` (false).
  "show_edit_predictions": true,
  // Controls whether edit predictions are shown in a given language scope.
  // Example: ["string", "comment"]
  "edit_predictions_disabled_in": [],
  // Whether to show tabs and spaces in the editor.
  // This setting can take four values:
  //
  // 1. Draw tabs and spaces only for the selected text (default):
  //    "selection"
  // 2. Do not draw any tabs or spaces:
  //    "none"
  // 3. Draw all invisible symbols:
  //    "all"
  // 4. Draw whitespaces at boundaries only:
  //    "boundary"
  // For a whitespace to be on a boundary, any of the following conditions need to be met:
  // - It is a tab
  // - It is adjacent to an edge (start or end)
  // - It is adjacent to a whitespace (left or right)
  "show_whitespaces": "selection",
  // Settings related to calls in Zed
  "calls": {
    // Join calls with the microphone live by default
    "mute_on_join": false,
    // Share your project when you are the first to join a channel
    "share_on_join": false
  },
  // Toolbar related settings
  "toolbar": {
    // Whether to show breadcrumbs.
    "breadcrumbs": true,
    // Whether to show quick action buttons.
    "quick_actions": true,
    // Whether to show the Selections menu in the editor toolbar.
    "selections_menu": true,
    // Whether to show agent review buttons in the editor toolbar.
    "agent_review": true,
    // Whether to show code action buttons in the editor toolbar.
    "code_actions": false
  },
  // Titlebar related settings
  "title_bar": {
    // Whether to show the branch icon beside branch switcher in the titlebar.
    "show_branch_icon": false,
    // Whether to show the branch name button in the titlebar.
    "show_branch_name": true,
    // Whether to show the project host and name in the titlebar.
    "show_project_items": true,
    // Whether to show onboarding banners in the titlebar.
    "show_onboarding_banner": true,
    // Whether to show user picture in the titlebar.
    "show_user_picture": true,
    // Whether to show the sign in button in the titlebar.
    "show_sign_in": true
  },
  // Scrollbar related settings
  "scrollbar": {
    // When to show the scrollbar in the editor.
    // This setting can take four values:
    //
    // 1. Show the scrollbar if there's important information or
    //    follow the system's configured behavior (default):
    //   "auto"
    // 2. Match the system's configured behavior:
    //    "system"
    // 3. Always show the scrollbar:
    //    "always"
    // 4. Never show the scrollbar:
    //    "never"
    "show": "auto",
    // Whether to show cursor positions in the scrollbar.
    "cursors": true,
    // Whether to show git diff indicators in the scrollbar.
    "git_diff": true,
    // Whether to show buffer search results in the scrollbar.
    "search_results": true,
    // Whether to show selected text occurrences in the scrollbar.
    "selected_text": true,
    // Whether to show selected symbol occurrences in the scrollbar.
    "selected_symbol": true,
    // Which diagnostic indicators to show in the scrollbar:
    //  - "none" or false: do not show diagnostics
    //  - "error": show only errors
    //  - "warning": show only errors and warnings
    //  - "information": show only errors, warnings, and information
    //  - "all" or true: show all diagnostics
    "diagnostics": "all",
    // Forcefully enable or disable the scrollbar for each axis
    "axes": {
      // When false, forcefully disables the horizontal scrollbar. Otherwise, obey other settings.
      "horizontal": true,
      // When false, forcefully disables the vertical scrollbar. Otherwise, obey other settings.
      "vertical": true
    }
  },
  // Minimap related settings
  "minimap": {
    // When to show the minimap in the editor.
    // This setting can take three values:
    // 1. Show the minimap if the editor's scrollbar is visible:
    //    "auto"
    // 2. Always show the minimap:
    //    "always"
    // 3. Never show the minimap:
    //    "never" (default)
    "show": "never",
    // When to show the minimap thumb.
    // This setting can take two values:
    // 1. Show the minimap thumb if the mouse is over the minimap:
    //    "hover"
    // 2. Always show the minimap thumb:
    //    "always" (default)
    "thumb": "always",
    // How the minimap thumb border should look.
    // This setting can take five values:
    // 1. Display a border on all sides of the thumb:
    //    "thumb_border": "full"
    // 2. Display a border on all sides except the left side of the thumb:
    //    "thumb_border": "left_open" (default)
    // 3. Display a border on all sides except the right side of the thumb:
    //    "thumb_border": "right_open"
    // 4. Display a border only on the left side of the thumb:
    //    "thumb_border": "left_only"
    // 5. Display the thumb without any border:
    //    "thumb_border": "none"
    "thumb_border": "left_open",
    // How to highlight the current line in the minimap.
    // This setting can take the following values:
    //
    // 1. `null` to inherit the editor `current_line_highlight` setting (default)
    // 2. "line" or "all" to highlight the current line in the minimap.
    // 3. "gutter" or "none" to not highlight the current line in the minimap.
    "current_line_highlight": null
  },
  // Enable middle-click paste on Linux.
  "middle_click_paste": true,
  // What to do when multibuffer is double clicked in some of its excerpts
  // (parts of singleton buffers).
  // May take 2 values:
  //  1. Behave as a regular buffer and select the whole word (default).
  //         "double_click_in_multibuffer": "select"
  //  2. Open the excerpt clicked as a new buffer in the new tab.
  //         "double_click_in_multibuffer": "open",
  // For the case of "open", regular selection behavior can be achieved by holding `alt` when double clicking.
  "double_click_in_multibuffer": "select",
  "gutter": {
    // Whether to show line numbers in the gutter.
    "line_numbers": true,
    // Whether to show runnables buttons in the gutter.
    "runnables": true,
    // Whether to show breakpoints in the gutter.
    "breakpoints": true,
    // Whether to show fold buttons in the gutter.
    "folds": true
  },
  "indent_guides": {
    // Whether to show indent guides in the editor.
    "enabled": true,
    // The width of the indent guides in pixels, between 1 and 10.
    "line_width": 1,
    // The width of the active indent guide in pixels, between 1 and 10.
    "active_line_width": 1,
    // Determines how indent guides are colored.
    // This setting can take the following three values:
    //
    // 1. "disabled"
    // 2. "fixed"
    // 3. "indent_aware"
    "coloring": "fixed",
    // Determines how indent guide backgrounds are colored.
    // This setting can take the following two values:
    //
    // 1. "disabled"
    // 2. "indent_aware"
    "background_coloring": "disabled"
  },
  // Whether the editor will scroll beyond the last line.
  "scroll_beyond_last_line": "one_page",
  // The number of lines to keep above/below the cursor when scrolling.
  "vertical_scroll_margin": 3,
  // Whether to scroll when clicking near the edge of the visible text area.
  "autoscroll_on_clicks": false,
  // The number of characters to keep on either side when scrolling with the mouse
  "horizontal_scroll_margin": 5,
  // Scroll sensitivity multiplier. This multiplier is applied
  // to both the horizontal and vertical delta values while scrolling.
  "scroll_sensitivity": 1.0,
  // Scroll sensitivity multiplier for fast scrolling. This multiplier is applied
  // to both the horizontal and vertical delta values while scrolling. Fast scrolling
  // happens when a user holds the alt or option key while scrolling.
  "fast_scroll_sensitivity": 4.0,
  "relative_line_numbers": false,
  // If 'search_wrap' is disabled, search result do not wrap around the end of the file.
  "search_wrap": true,
  // Search options to enable by default when opening new project and buffer searches.
  "search": {
    // Whether to show the project search button in the status bar.
    "button": true,
    "whole_word": false,
    "case_sensitive": false,
    "include_ignored": false,
    "regex": false
  },
  // When to populate a new search's query based on the text under the cursor.
  // This setting can take the following three values:
  //
  // 1. Always populate the search query with the word under the cursor (default).
  //    "always"
  // 2. Only populate the search query when there is text selected
  //    "selection"
  // 3. Never populate the search query
  //    "never"
  "seed_search_query_from_cursor": "always",
  // When enabled, automatically adjusts search case sensitivity based on your query.
  // If your search query contains any uppercase letters, the search becomes case-sensitive;
  // if it contains only lowercase letters, the search becomes case-insensitive.
  "use_smartcase_search": false,
  // Inlay hint related settings
  "inlay_hints": {
    // Global switch to toggle hints on and off, switched off by default.
    "enabled": false,
    // Toggle certain types of hints on and off, all switched on by default.
    "show_type_hints": true,
    "show_parameter_hints": true,
    // Corresponds to null/None LSP hint type value.
    "show_other_hints": true,
    // Whether to show a background for inlay hints.
    //
    // If set to `true`, the background will use the `hint.background` color from the current theme.
    "show_background": false,
    // Time to wait after editing the buffer, before requesting the hints,
    // set to 0 to disable debouncing.
    "edit_debounce_ms": 700,
    // Time to wait after scrolling the buffer, before requesting the hints,
    // set to 0 to disable debouncing.
    "scroll_debounce_ms": 50,
    // A set of modifiers which, when pressed, will toggle the visibility of inlay hints.
    // If the set if empty or not all the modifiers specified are pressed, inlay hints will not be toggled.
    "toggle_on_modifiers_press": {
      "control": false,
      "shift": false,
      "alt": false,
      "platform": false,
      "function": false
    }
  },
  "project_panel": {
    // Whether to show the project panel button in the status bar
    "button": true,
    // Whether to hide the gitignore entries in the project panel.
    "hide_gitignore": false,
    // Default width of the project panel.
    "default_width": 240,
    // Where to dock the project panel. Can be 'left' or 'right'.
    "dock": "left",
    // Spacing between worktree entries in the project panel. Can be 'comfortable' or 'standard'.
    "entry_spacing": "comfortable",
    // Whether to show file icons in the project panel.
    "file_icons": true,
    // Whether to show folder icons or chevrons for directories in the project panel.
    "folder_icons": true,
    // Whether to show the git status in the project panel.
    "git_status": true,
    // Amount of indentation for nested items.
    "indent_size": 20,
    // Whether to reveal it in the project panel automatically,
    // when a corresponding project entry becomes active.
    // Gitignored entries are never auto revealed.
    "auto_reveal_entries": true,
    // Whether to fold directories automatically and show compact folders
    // (e.g. "a/b/c" ) when a directory has only one subdirectory inside.
    "auto_fold_dirs": true,
    // Scrollbar-related settings
    "scrollbar": {
      // When to show the scrollbar in the project panel.
      // This setting can take five values:
      //
      // 1. null (default): Inherit editor settings
      // 2. Show the scrollbar if there's important information or
      //    follow the system's configured behavior (default):
      //   "auto"
      // 3. Match the system's configured behavior:
      //    "system"
      // 4. Always show the scrollbar:
      //    "always"
      // 5. Never show the scrollbar:
      //    "never"
      "show": null
    },
    // Which files containing diagnostic errors/warnings to mark in the project panel.
    // This setting can take the following three values:
    //
    // 1. Do not mark any files:
    //    "off"
    // 2. Only mark files with errors:
    //    "errors"
    // 3. Mark files with errors and warnings:
    //    "all"
    "show_diagnostics": "all",
    // Settings related to indent guides in the project panel.
    "indent_guides": {
      // When to show indent guides in the project panel.
      // This setting can take two values:
      //
      // 1. Always show indent guides:
      //    "always"
      // 2. Never show indent guides:
      //    "never"
      "show": "always"
    }
  },
  "outline_panel": {
    // Whether to show the outline panel button in the status bar
    "button": true,
    // Default width of the outline panel.
    "default_width": 300,
    // Where to dock the outline panel. Can be 'left' or 'right'.
    "dock": "left",
    // Whether to show file icons in the outline panel.
    "file_icons": true,
    // Whether to show folder icons or chevrons for directories in the outline panel.
    "folder_icons": true,
    // Whether to show the git status in the outline panel.
    "git_status": true,
    // Amount of indentation for nested items.
    "indent_size": 20,
    // Whether to reveal it in the outline panel automatically,
    // when a corresponding outline entry becomes active.
    // Gitignored entries are never auto revealed.
    "auto_reveal_entries": true,
    // Whether to fold directories automatically
    // when a directory has only one directory inside.
    "auto_fold_dirs": true,
    // Settings related to indent guides in the outline panel.
    "indent_guides": {
      // When to show indent guides in the outline panel.
      // This setting can take two values:
      //
      // 1. Always show indent guides:
      //    "always"
      // 2. Never show indent guides:
      //    "never"
      "show": "always"
    },
    // Scrollbar-related settings
    "scrollbar": {
      // When to show the scrollbar in the project panel.
      // This setting can take five values:
      //
      // 1. null (default): Inherit editor settings
      // 2. Show the scrollbar if there's important information or
      //    follow the system's configured behavior (default):
      //   "auto"
      // 3. Match the system's configured behavior:
      //    "system"
      // 4. Always show the scrollbar:
      //    "always"
      // 5. Never show the scrollbar:
      //    "never"
      "show": null
    }
  },
  "collaboration_panel": {
    // Whether to show the collaboration panel button in the status bar.
    "button": true,
    // Where to dock the collaboration panel. Can be 'left' or 'right'.
    "dock": "left",
    // Default width of the collaboration panel.
    "default_width": 240
  },
  "chat_panel": {
    // When to show the chat panel button in the status bar.
    // Can be 'never', 'always', or 'when_in_call',
    // or a boolean (interpreted as 'never'/'always').
    "button": "when_in_call",
    // Where to the chat panel. Can be 'left' or 'right'.
    "dock": "right",
    // Default width of the chat panel.
    "default_width": 240
  },
  "git_panel": {
    // Whether to show the git panel button in the status bar.
    "button": true,
    // Where to show the git panel. Can be 'left' or 'right'.
    "dock": "left",
    // Default width of the git panel.
    "default_width": 360,
    // Style of the git status indicator in the panel.
    //
    // Default: icon
    "status_style": "icon",
    // What branch name to use if init.defaultBranch
    // is not set
    //
    // Default: main
    "fallback_branch_name": "main",
    // Whether to sort entries in the panel by path
    // or by status (the default).
    //
    // Default: false
    "sort_by_path": false,
    "scrollbar": {
      // When to show the scrollbar in the git panel.
      //
      // Default: inherits editor scrollbar settings
      "show": null
    }
  },
  "message_editor": {
    // Whether to automatically replace emoji shortcodes with emoji characters.
    // For example: typing `:wave:` gets replaced with `👋`.
    "auto_replace_emoji_shortcode": true
  },
  "notification_panel": {
    // Whether to show the notification panel button in the status bar.
    "button": true,
    // Where to dock the notification panel. Can be 'left' or 'right'.